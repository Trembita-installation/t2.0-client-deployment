---

- name: Check each conflicting package for presence
  shell: dpkg -l {{ item }} 2>/dev/null | grep '^ii' | awk '{print $2}'
  register: check_conflicting_package
  changed_when: false
  loop: "{{ check_packages_list }}"
  loop_control:
    label: "{{ item }}"

- name: Fail if any conflicting package is installed
  fail:
    msg: >
      The package '{{ item.item }}' is already installed. Aborting installation!
  when: item.stdout != ""
  loop: "{{ check_conflicting_package.results }}"
  loop_control:
    label: "{{ item.item }}"

- name: Install MongoDB
  ansible.builtin.apt:
    name: mongodb-org
    state: present
    update_cache: yes

- name: Reload systemd daemon
  ansible.builtin.systemd:
    daemon_reload: yes

- name: Enable and start mongod
  ansible.builtin.service:
    name: mongod
    enabled: yes
    state: started



- name: Generate OpenSearch initial admin password
  ansible.builtin.set_fact:
    opensearch_admin_password: "{{ lookup('password', '/dev/null', chars='ascii_letters,digits,_@#%^-_=+', length=32) }}"





- name: Install OpenSearch with OPENSEARCH_INITIAL_ADMIN_PASSWORD
  ansible.builtin.shell: |
    OPENSEARCH_INITIAL_ADMIN_PASSWORD="{{ opensearch_admin_password }}" apt -y install opensearch
  environment:
    DEBIAN_FRONTEND: noninteractive
  changed_when: true

- name: Hold OpenSearch package to prevent auto-upgrade
  ansible.builtin.shell: apt-mark hold opensearch
  changed_when: false




- name: Configure OpenSearch minimal single-node settings
  ansible.builtin.blockinfile:
    path: /etc/opensearch/opensearch.yml
    marker: "# {mark} ANSIBLE MANAGED BLOCK - GRAYLOG"
    create: yes
    block: |
      cluster.name: graylog
      node.name: "{{ ansible_hostname }}"
      discovery.type: single-node
      network.host: 127.0.0.1
      action.auto_create_index: false
      plugins.security.disabled: true
  notify: Restart OpenSearch




- name: Get total system memory in MB
  ansible.builtin.set_fact:
    total_memory_mb: "{{ ansible_memtotal_mb }}"

- name: Calculate half of system memory for JVM
  ansible.builtin.set_fact:
    opensearch_heap_size: "{{ (total_memory_mb / 2) | int }}"

- name: Configure OpenSearch JVM heap size
  ansible.builtin.lineinfile:
    path: /etc/opensearch/jvm.options
    regexp: '^-Xms'
    line: "-Xms{{ opensearch_heap_size }}m"
    backrefs: yes
    state: present

- name: Set -Xmx in OpenSearch JVM options
  ansible.builtin.lineinfile:
    path: /etc/opensearch/jvm.options
    regexp: '^-Xmx'
    line: "-Xmx{{ opensearch_heap_size }}m"
    backrefs: yes
    state: present




- name: Set vm.max_map_count temporarily
  ansible.builtin.command: sysctl -w vm.max_map_count=262144
  changed_when: true

- name: Ensure vm.max_map_count is persistent
  ansible.builtin.lineinfile:
    path: /etc/sysctl.conf
    line: 'vm.max_map_count=262144'
    state: present

- name: Reload systemd daemon
  ansible.builtin.systemd:
    daemon_reload: yes

- name: Enable and start OpenSearch service
  ansible.builtin.service:
    name: opensearch
    enabled: true
    state: started




- name: Install Graylog server
  ansible.builtin.apt:
    name: graylog-server
    state: present
    update_cache: yes

- name: Hold graylog-server to prevent auto-upgrade
  ansible.builtin.shell: apt-mark hold graylog-server
  changed_when: false



- name: Set facts from inventory (IP and hostname)
  ansible.builtin.set_fact:
    graylog_server_ip: "{{ hostvars[inventory_hostname].ansible_host }}"
    graylog_server_address: "{{ inventory_hostname }}"


- name: Ensure directory /opt/graylog/ssl/site exists
  ansible.builtin.file:
    path: /opt/graylog/ssl/site
    state: directory
    owner: root
    group: root
    mode: '0755'




- name: Create OpenSSL config for Graylog self-signed cert
  ansible.builtin.copy:
    dest: /opt/graylog/ssl/site/site.conf
    owner: root
    group: root
    mode: '0644'
    content: |
      [req]
      distinguished_name = req_distinguished_name
      x509_extensions = v3_req
      prompt = no

      [req_distinguished_name]
      C = UA
      ST = Kyiv
      L = Kyiv
      O = Organization
      OU = Department
      CN = {{ hostvars[inventory_hostname].ansible_host }}

      [v3_req]
      keyUsage = nonRepudiation, digitalSignature, keyEncipherment
      extendedKeyUsage = serverAuth
      subjectAltName = @alt_names

      [alt_names]
      IP.1 = {{ hostvars[inventory_hostname].ansible_host }}
      DNS.1 = {{ inventory_hostname }}


- name: Generate self-signed cert and key for Graylog
  ansible.builtin.command: >
    openssl req -x509 -newkey ec -pkeyopt ec_paramgen_curve:P-256
    -config /opt/graylog/ssl/site/site.conf
    -keyout /opt/graylog/ssl/site/site.key
    -out /opt/graylog/ssl/site/site.crt
    -days 3650 -nodes
  args:
    creates: /opt/graylog/ssl/site/site.crt
  register: gen_cert
  notify: Restart Graylog

- name: Set ownership of certificate and key to graylog
  ansible.builtin.file:
    path: "{{ item }}"
    owner: graylog
    group: graylog
    mode: '0640'
  loop:
    - /opt/graylog/ssl/site/site.key
    - /opt/graylog/ssl/site/site.crt


- name: Copy default JVM cacerts to /opt/graylog/ssl/graylog.jks
  ansible.builtin.copy:
    src: /usr/share/graylog-server/jvm/lib/security/cacerts
    dest: /opt/graylog/ssl/graylog.jks
    remote_src: yes
    owner: graylog
    group: graylog
    mode: '0644'



- name: Import site.crt into graylog.jks truststore
  shell: |
    echo yes | /usr/share/graylog-server/jvm/bin/keytool -importcert \
      -keystore /opt/graylog/ssl/graylog.jks \
      -storepass changeit \
      -alias graylog-https \
      -file /opt/graylog/ssl/site/site.crt
  args:
    creates: /opt/graylog/ssl/.graylog_https_cert_imported
  register: cert_import
  changed_when: "'Certificate was added' in cert_import.stdout or 'already exists' in cert_import.stdout"



- name: Ensure GRAYLOG_SERVER_JAVA_OPTS trustStore is set
  lineinfile:
    path: /etc/default/graylog-server
    insertafter: "^GRAYLOG_SERVER_JAVA_OPTS=.*"
    line: 'GRAYLOG_SERVER_JAVA_OPTS="$GRAYLOG_SERVER_JAVA_OPTS -Djavax.net.ssl.trustStore=/opt/graylog/ssl/graylog.jks"'
    state: present


- name: Restart Graylog after trustStore config
  ansible.builtin.service:
    name: graylog-server
    state: restarted


- name: Calculate proper SHA256 hash for Graylog admin password
  set_fact:
    graylog_root_password_sha2: "{{ graylog_admin_password | hash('sha256') }}"




- name: Ensure Graylog server.conf is configured
  blockinfile:
    path: /etc/graylog/server/server.conf
    marker: "# {mark} ANSIBLE MANAGED BLOCK - GRAYLOG CONFIG"
    create: yes
    block: |
      password_secret = {{ lookup('password', '/dev/null', length=96, chars='ascii_letters,digits') }}
      root_username = admin
      root_password_sha2 = {{ graylog_root_password_sha2 }}
      root_timezone = Europe/Kyiv
      http_bind_address = 0.0.0.0:443
      http_publish_uri = https://{{ hostvars[inventory_hostname].ansible_host }}/
      http_enable_tls = true
      http_tls_cert_file = /opt/graylog/ssl/site/site.crt
      http_tls_key_file = /opt/graylog/ssl/site/site.key
      elasticsearch_hosts = http://127.0.0.1:9200


- name: Reload systemd configuration
  ansible.builtin.systemd:
    daemon_reload: yes

- name: Enable and start Graylog service
  ansible.builtin.service:
    name: graylog-server
    enabled: true
    state: started





- name: Ensure directory for TLS input certs exists
  ansible.builtin.file:
    path: /opt/graylog/ssl/inputs
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: Generate TLS cert for rsyslog input (self-signed)
  ansible.builtin.command: >
    openssl req -x509
    -config /opt/graylog/ssl/site/site.conf
    -newkey ec -pkeyopt ec_paramgen_curve:P-256
    -keyout /opt/graylog/ssl/inputs/input_rsyslog.key
    -out /opt/graylog/ssl/inputs/input_rsyslog.crt
    -days 3650 -nodes
  args:
    creates: /opt/graylog/ssl/inputs/input_rsyslog.crt

- name: Set permissions for input_rsyslog cert and key
  ansible.builtin.file:
    path: "{{ item }}"
    owner: graylog
    group: graylog
    mode: '0640'
  loop:
    - /opt/graylog/ssl/inputs/input_rsyslog.key
    - /opt/graylog/ssl/inputs/input_rsyslog.crt

- name: Ensure directory for trusted client certs exists
  ansible.builtin.file:
    path: /opt/graylog/ssl/certs
    state: directory
    owner: root
    group: root
    mode: '0755'





- name: Wait until Graylog API on port 443 responds
  uri:
    url: "https://{{ hostvars[inventory_hostname].ansible_host }}/api"
    method: GET
    user: admin
    password: "{{ graylog_admin_password }}"
    force_basic_auth: true
    validate_certs: false
    status_code: 200
  register: graylog_api_check
  retries: 10
  delay: 5
  until: graylog_api_check.status == 200



- name: Get list of Graylog nodes
  uri:
    url: "https://{{ hostvars[inventory_hostname].ansible_host }}/api/system/cluster/nodes"
    method: GET
    user: admin
    password: "{{ graylog_admin_password }}"
    force_basic_auth: true
    validate_certs: false
    headers:
      X-Requested-By: "ansible"
    return_content: true
  register: graylog_nodes

- name: Fail if Graylog returned no nodes
  fail:
    msg: "Graylog API вернул пустой список нод!"
  when: graylog_nodes.json.nodes | length == 0

- name: Set fact for graylog_node_id
  set_fact:
    graylog_node_id: "{{ graylog_nodes.json.nodes[0].node_id }}"

- name: Create Graylog Syslog TCP input with TLS
  uri:
    url: "https://{{ hostvars[inventory_hostname].ansible_host }}/api/system/inputs"
    method: POST
    user: admin
    password: "{{ graylog_admin_password }}"
    force_basic_auth: true
    validate_certs: false
    headers:
      Content-Type: "application/json"
      X-Requested-By: "ansible"
    body_format: json
    body:
      title: "Component Syslog Inputs"
      type: "org.graylog2.inputs.syslog.tcp.SyslogTCPInput"
      configuration:
        bind_address: "0.0.0.0"
        port: 514
        recv_buffer_size: 1048576
        tls_cert_file: "/opt/graylog/ssl/inputs/input_rsyslog.crt"
        tls_key_file: "/opt/graylog/ssl/inputs/input_rsyslog.key"
        tls_enable: true
        tls_key_password: ""
        tls_client_auth: "required"
        tls_client_auth_cert_file: "/opt/graylog/ssl/certs"
        use_null_delimiter: false
        expand_structured_data: true
        allow_override_date: true
        store_full_message: true
        timezone: "Europe/Kyiv"
      global: false
      node: "{{ graylog_node_id }}"
  register: input_creation
  failed_when: input_creation.status >= 400



# Fetch Graylog cert
- name: Fetch input_rsyslog.crt from Graylog
  fetch:
    src: /opt/graylog/ssl/inputs/input_rsyslog.crt
    dest: "/tmp/input_rsyslog.crt"
    flat: yes
  delegate_to: "{{ groups['graylog'][0] }}"
  run_once: true

# Ensure /etc/uxp/ssl exists
- name: Ensure /etc/uxp/ssl exists on SS nodes
  file:
    path: /etc/uxp/ssl
    state: directory
    owner: uxp
    group: uxp
    mode: '0750'
  delegate_to: "{{ item }}"
  loop: "{{ groups['ss'] }}"

# Copy Graylog cert to SS nodes
- name: Copy Graylog TLS cert to SS nodes
  copy:
    src: /tmp/input_rsyslog.crt
    dest: /etc/uxp/ssl/graylog_remote.crt
    owner: root
    group: uxp
    mode: '0640'
  delegate_to: "{{ item }}"
  loop: "{{ groups['ss'] }}"

# Fetch rsyslog certs from each SS node
- name: Fetch rsyslog cert from SS nodes
  fetch:
    src: /etc/uxp/ssl/rsyslog_remote.crt
    dest: "/tmp/rsyslog_{{ item }}.crt"
    flat: yes
  delegate_to: "{{ item }}"
  loop: "{{ groups['ss'] }}"

# Ensure Graylog cert dir
- name: Ensure /opt/graylog/ssl/certs exists on Graylog
  file:
    path: /opt/graylog/ssl/certs
    state: directory
    owner: root
    group: root
    mode: '0755'
  delegate_to: "{{ groups['graylog'][0] }}"
  run_once: true

# Copy rsyslog certs to Graylog
- name: Copy rsyslog client certs to Graylog
  copy:
    src: "/tmp/rsyslog_{{ item }}.crt"
    dest: "/opt/graylog/ssl/certs/{{ item }}.crt"
    owner: root
    group: root
    mode: '0644'
  delegate_to: "{{ groups['graylog'][0] }}"
  loop: "{{ groups['ss'] }}"



# Pause uxp-integrity service on SS nodes
- name: Pause uxp-integrity service on SS nodes
  ansible.builtin.command: uxp-integrity pause
  delegate_to: "{{ item }}"
  loop: "{{ groups['ss'] }}"

# Deploy Rsyslog configuration to SS nodes
- name: Deploy rsyslog config from template to SS nodes
  ansible.builtin.template:
    src: 45-uxp-graylog.conf.j2
    dest: /etc/rsyslog.d/45-uxp-graylog.conf
    owner: root
    group: root
    mode: '0644'
  vars:
    graylog_server_ip: "{{ hostvars[groups['graylog'][0]]['ansible_host'] }}"
  delegate_to: "{{ item }}"
  loop: "{{ groups['ss'] }}"

# Restart rsyslog service on SS nodes
- name: Restart rsyslog service on SS nodes
  ansible.builtin.service:
    name: rsyslog
    state: restarted
  delegate_to: "{{ item }}"
  loop: "{{ groups['ss'] }}"

# Update uxp-integrity service on SS nodes
- name: update uxp-integrity
  command: uxp-integrity update
  delegate_to: "{{ item }}"
  loop: "{{ groups['ss'] }}"
  run_once: false


